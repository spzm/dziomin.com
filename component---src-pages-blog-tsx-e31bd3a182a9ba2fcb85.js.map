{"version":3,"sources":["webpack:///./src/components/TagsCard/TagsCard.tsx","webpack:///./src/components/BlogPagination/BlogPagination.tsx","webpack:///./src/pages/blog.tsx","webpack:///./src/components/BlogTitle.tsx"],"names":["TagsCard","props","react","Card","Content","Header","List","tags","map","tag","isActive","fieldValue","tagLink","Item","as","key","Icon","name","color","style","fontWeight","Link","to","totalCount","BlogPagination","pageCount","activeItem","pathname","startsWith","split","Menu","pagination","times","index","pageIndex","toString","rangeStep","isInRange","isLastPage","cursor","active","disabled","withLayout","data","group","posts","edges","location","Math","ceil","Posts","Container","_ref","node","frontmatter","timeToRead","slug","fields","excerpt","avatar","author","children","cover","get","extra","Comment","Group","Avatar","src","fixed","srcSet","Author","id","Metadata","margin","updatedDate","description","Description","gatsby_browser_entry","fluid","image","header","title","BlogTitle","Segment","vertical","Grid","padded","justifyContent","maxWidth","textAlign","pageContext","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_1__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_2__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_3__","__webpack_exports__","Subheader"],"mappings":"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","file":"component---src-pages-blog-tsx-e31bd3a182a9ba2fcb85.js","sourcesContent":["import * as React from \"react\";\nimport { GatsbyLinkProps } from \"gatsby-link\";\nimport { Card, List } from \"semantic-ui-react\";\nimport { markdownRemarkGroupConnectionConnection } from \"../../graphql-types\";\n\ninterface TagsCardProps extends React.HTMLProps<HTMLDivElement> {\n  tags: markdownRemarkGroupConnectionConnection[];\n  Link: React.ComponentClass<GatsbyLinkProps<any>>;\n  tag?: string;\n}\n\nexport default (props: TagsCardProps) => {\n  return (\n    <Card>\n      <Card.Content>\n        <Card.Header>\n          Tags\n        </Card.Header>\n      </Card.Content>\n      <Card.Content>\n        <List>\n          {props.tags.map((tag) => {\n            const isActive = tag.fieldValue === props.tag;\n            const activeStyle = {\n              fontWeight: \"700\",\n            };\n            const tagLink = isActive ? `/blog` : `/blog/tags/${tag.fieldValue}/`;\n            return (\n              <List.Item as=\"span\" key={tag.fieldValue}>\n                <List.Icon name=\"tag\" color={isActive ? \"blue\" : null} />\n                <List.Content style={isActive ? activeStyle : null}>\n                  <props.Link to={tagLink}>\n                    {tag.fieldValue} ({tag.totalCount})\n                  </props.Link>\n                </List.Content>\n              </List.Item>\n            );\n          })}\n        </List>\n      </Card.Content>\n    </Card>\n  );\n};\n","import * as React from \"react\";\nimport { GatsbyLinkProps } from \"gatsby-link\";\nimport { Menu } from \"semantic-ui-react\";\nimport { times } from \"lodash\";\n\ninterface BlogPaginationProps extends React.HTMLProps<HTMLDivElement> {\n  pathname: string;\n  Link: React.ComponentClass<GatsbyLinkProps<any>>;\n  pageCount: number;\n}\n\nexport default (props: BlogPaginationProps) => {\n  if (props.pageCount === 1) { return null; }\n  const activeItem = props.pathname.startsWith(\"/blog/page/\")\n    ? props.pathname.split(\"/\")[3]\n    : \"1\";\n\n  return (\n    <Menu pagination>\n      {times(props.pageCount, (index) => {\n        const pageIndex = (index + 1).toString();\n\n        const rangeStep = props.pageCount < 10 ? 5 : 3;\n        const isInRange = (+pageIndex - rangeStep < +activeItem && +pageIndex + rangeStep > +activeItem);\n        const isLastPage = (+pageIndex === props.pageCount);\n        const isFirstPage = (+pageIndex === 1);\n        if (isInRange || isFirstPage || isLastPage) {\n          return (\n            <Menu.Item\n              key={pageIndex}\n              style={{ cursor: \"pointer\" }}\n              as={props.Link}\n              to={`/blog/page/${pageIndex}/`}\n              name={pageIndex}\n              active={activeItem === pageIndex}\n            />\n          );\n        } else {\n          return (+pageIndex === props.pageCount - 1 || +pageIndex === 2)\n            ? <Menu.Item key={pageIndex} disabled>...</Menu.Item>\n            : null;\n        }\n      })}\n    </Menu>\n  );\n};\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport { Header, Grid, Card, List, Container, Feed, Segment, Comment } from \"semantic-ui-react\";\nimport { MarkdownRemarkConnection, ImageSharp } from \"../graphql-types\";\nimport BlogTitle from \"../components/BlogTitle\";\nimport TagsCard from \"../components/TagsCard/TagsCard\";\nimport BlogPagination from \"../components/BlogPagination/BlogPagination\";\nimport { get } from \"lodash\";\nimport {withLayout, LayoutProps} from \"../components/Layout\";\nimport { MarkdownRemark } from \"../graphql-types\";\n\ninterface BlogProps extends LayoutProps {\n  data: {\n    tags: MarkdownRemarkConnection;\n    posts: MarkdownRemarkConnection;\n  };\n  pageContext: {\n    tag?: string; // only set into `templates/tags-pages.tsx`\n  };\n}\n\nconst BlogPage = (props: BlogProps) => {\n  const tags = props.data.tags.group;\n  const posts = props.data.posts.edges;\n  const { pathname } = props.location;\n  const pageCount = Math.ceil(props.data.posts.totalCount / 10);\n\n  // TODO export posts in a proper component\n  const Posts = (\n    <Container>\n      {posts.map(({ node }: {node: MarkdownRemark}) => {\n        const { frontmatter, timeToRead, fields: { slug }, excerpt } = node;\n        const avatar = frontmatter.author.avatar.children[0] as ImageSharp;\n        const cover = get(frontmatter, \"image.children.0.fixed\", {});\n\n        const extra = (\n          <Comment.Group>\n            <Comment>\n              <Comment.Avatar\n                src={avatar.fixed.src}\n                srcSet={avatar.fixed.srcSet}\n              />\n              <Comment.Content>\n                <Comment.Author style={{ fontWeight: 400 }}>\n                  {frontmatter.author.id}\n                </Comment.Author>\n                <Comment.Metadata style={{ margin: 0 }}>\n                  {frontmatter.updatedDate} - {timeToRead} min read\n              </Comment.Metadata>\n              </Comment.Content>\n            </Comment>\n          </Comment.Group>\n        );\n\n        const description = (\n          <Card.Description>\n            {excerpt}\n            <br />\n            <Link to={slug}>Read moreâ€¦</Link>\n          </Card.Description>\n        );\n\n        return (\n          <Card key={slug}\n            fluid\n            image={cover}\n            header={frontmatter.title}\n            extra={extra}\n            description={description}\n          />\n        );\n      })}\n    </Container>\n  );\n\n  return (\n    <Container>\n      {/* Title */}\n      <BlogTitle />\n\n      {/* Content */}\n      <Segment vertical>\n        <Grid padded style={{ justifyContent: \"space-around\" }}>\n          <div style={{ maxWidth: 600 }}>\n            {Posts}\n            <Segment vertical textAlign=\"center\">\n              <BlogPagination Link={Link} pathname={pathname} pageCount={pageCount} />\n            </Segment>\n          </div>\n          <div>\n            <TagsCard Link={Link} tags={tags} tag={props.pageContext.tag} />\n          </div>\n        </Grid>\n      </Segment>\n    </Container>\n  );\n};\n\nexport default withLayout(BlogPage);\n\nexport const pageQuery = graphql`\nquery PageBlog {\n  # Get tags\n  tags: allMarkdownRemark(filter: {frontmatter: {draft: {ne: true}}}) {\n    group(field: frontmatter___tags) {\n      fieldValue\n      totalCount\n    }\n  }\n\n  # Get posts\n  posts: allMarkdownRemark(\n    sort: { order: DESC, fields: [frontmatter___updatedDate] },\n    filter: {\n      frontmatter: { draft: { ne: true } },\n      fileAbsolutePath: { regex: \"/blog/\" }\n    },\n    limit: 10\n  ) {\n    totalCount\n    edges {\n      node {\n        excerpt\n        timeToRead\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          updatedDate(formatString: \"DD MMMM, YYYY\")\n          image {\n          \tchildren {\n              ... on ImageSharp {\n                fixed(width: 700, height: 100) {\n                  src\n                  srcSet\n                }\n              }\n            }\n          }\n          author {\n            id\n            avatar {\n              children {\n                ... on ImageSharp {\n                  fixed(width: 35, height: 35) {\n                    src\n                    srcSet\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n","import * as React from \"react\";\nimport { Header, Segment, Icon } from \"semantic-ui-react\";\n\nexport default () => {\n  return (\n    <Segment vertical>\n      <Header as=\"h2\">\n        <Icon name=\"newspaper\" />\n        <Header.Content>\n          Blog\n            <Header.Subheader>\n            All about this starter kit\n            </Header.Subheader>\n        </Header.Content>\n      </Header>\n    </Segment>\n  );\n};\n"],"sourceRoot":""}